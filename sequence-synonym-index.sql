--SEQUENCES , SYNONYMS , INDEX


--SEQUENCE
CREATE SEQUENCE DEPARTMENT_TEST_ID_SEQ;

--SEQUENCE DICTIONARY 
SELECT * FROM USER_SEQUENCES
WHERE sequence_name = 'DEPARTMENT_TEST_ID_SEQ';

CREATE TABLE DEPARTMENT_TEST(
DEPARTMENT_ID NUMBER PRIMARY KEY, 
DEPARTMENT_NAME VARCHAR2(40) 
);

INSERT INTO DEPARTMENT_TEST(DEPARTMENT_ID , DEPARTMENT_NAME)
VALUES(DEPARTMENT_TEST_ID_SEQ.NEXTVAL , 'D');

--RETURN DEPARTMENT_TEST_ID_SEQ  NEXT VALUE  AND IT INCREMENT 1 WHEN WE EXECUTE THIS STATEMENT 
SELECT DEPARTMENT_TEST_ID_SEQ.nextval FROM DUAL;

--RETURN DEPARTMENT_TEST_ID_SEQ CURRENT VALUE 
SELECT DEPARTMENT_TEST_ID_SEQ.CURRVAL FROM DUAL;


--CREATE SEQUENCE WITH SOME CONFIGURATION
CREATE SEQUENCE DEPARTMENT_ID_INC_5_SEQ
START WITH 11
INCREMENT BY 5;

--SEQUENCE START WITH 11 AND WHEN WE ADD DATA WITH THIS SEQUENCE ID WILL BE INCREMENT 5 

INSERT INTO DEPARTMENT_TEST(DEPARTMENT_ID , DEPARTMENT_NAME)
VALUES(DEPARTMENT_ID_INC_5_SEQ.NEXTVAL , 'B');

SELECT * FROM DEPARTMENT_TEST; --RESULT IS ID - 11 , 16 , 21



--SEQUENCE INCREMENT BY NEGATIVE NUMBER
CREATE SEQUENCE DEPARTMENT_ID_SEQ_INC_NEGATIVE
INCREMENT BY -100;

INSERT INTO DEPARTMENT_TEST(DEPARTMENT_ID , DEPARTMENT_NAME)
VALUES(DEPARTMENT_ID_SEQ_INC_NEGATIVE.NEXTVAL , 'L');

SELECT * FROM DEPARTMENT_TEST; --RESULT IS DEPARTMENT_ID = -1 , -101 , -201 , -301


--AND ALSO WE UPDATE DEPARTMENT_ID AND SET ANY SEQUENCE VALUE AND THIS STATEMENT UPDATE ALL EMPLOYEE_ID FOR DEPARTMENT_ID_INC_5_SEQ
UPDATE DEPARTMENT_TEST
SET department_id = DEPARTMENT_ID_INC_5_SEQ.NEXTVAL;


--NOW WE CREATE A TABLE AND SET THE DEFAULT VALUE FOR EMPLOYEE_ID WITH SEQUENCE (BUT THIS STATEMENT ONLY AVAILABLE ON ORACLE 12C AND UP)
CREATE SEQUENCE EMPLOYEE_X_TEST_SEQ;

CREATE TABLE EMPLOYEE_X_TEST(
    EMPLOYEE_ID NUMBER DEFAULT EMPLOYEE_X_TEST_SEQ.nextval PRIMARY KEY,
    EMPLOYEE_NAME VARCHAR2(20),
    EMPLOYEE_SURNAME VARCHAR(20)
);

--THIS STATEMENT GIVES ERROR IN ORACLE 11G


--AND WE CAN ALTER SEQUENCE
ALTER SEQUENCE EMPLOYEE_X_TEST_SEQ
INCREMENT BY 10
MAXVALUE 9999
CACHE 5;

SELECT * FROM USER_SEQUENCES
WHERE sequence_name = 'EMPLOYEE_X_TEST_SEQ';



--CREATE SYNONYMS
CREATE SYNONYM E
FOR EMPLOYEES;

SELECT * FROM E;

--SYNONYMS DICTIONARY
SELECT * FROM user_synonyms;


--AND WE CAN CREATE PUBLIC SYNONYMS AND WHY WE NEED PUBLIC SYNONYMS ,
--LET'S ASSUME WE HAVE A CUSTOMER AND CUSTOMER WANT TO SEE OUR EMPLOYEE TABLE BUT WE DON'T WANT TO SHOW OUR EMPLOYEES TABLES
--AND THIS MOMENT WE CREATE SYNONYMS FOR CUSTOMER AND HE CAN SEE OUR EMPLOYEE TABLE'S SYNONYMS
DROP SYNONYM E;

CREATE PUBLIC SYNONYM EMPLOYEES FOR HR.EMPLOYEES;



--CREATE INDEX

--WHEN WE CREATE CONSTRAINT FOR PRIMARY KEY OR UNIQUE KEY , AND ALSO INDEX WILL BE CREATED
--INDEX HELPS US FIND OUR DATA QUICKLY ?N THE TABLE

CREATE INDEX EMP_INDEX_FIRST_NAME ON EMPLOYEES (FIRST_NAME);

SELECT * FROM user_indexes
WHERE INDEX_NAME = 'EMP_INDEX_FIRST_NAME';


--AND ALSO WE CREATED INDEX FOR FUNCTION 
SELECT * FROM EMPLOYEES
WHERE UPPER(LAST_NAME) = 'AUSTIN';

CREATE INDEX EMPLOYEE_IND_UPPER_NAME ON EMPLOYEES (UPPER(LAST_NAME));

--TABLE'S COLUMN INDEX
SELECT * FROM user_ind_columns
WHERE TABLE_NAME = 'EMPLOYEES';


--AND ALSO WE CREATE INDEX WHILE CREATING A TABLE 
CREATE TABLE EMPLOYEE_Y_INDEX(
ID NUMBER PRIMARY KEY USING INDEX (CREATE INDEX EMP_INDEX ON EMPLOYEE_Y_INDEX (ID)),
NAME VARCHAR2(20)
);

SELECT * FROM user_ind_columns
WHERE TABLE_NAME = 'EMPLOYEE_Y_INDEX';


--AND ALSO WE CAN CREATE INDEX FOR 2 COLUMN
CREATE INDEX EMP_INDEX_SAL_DATE ON EMPLOYEES (SALARY , HIRE_DATE);

SELECT * FROM user_ind_columns
WHERE TABLE_NAME = 'EMPLOYEES';










